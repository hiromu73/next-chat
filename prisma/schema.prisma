// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  password      String? // Supabaseを使う場合、実際のパスワードは保存しない
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  debates       Chat[]

  @@map("users") //DBテーブル名とprismaモデルのマッピング
}

model Chat {
  id            String    @id @default(cuid())
  title         String
  option        String    // ディベートのoption
  type          String    // ディベートのtype
  conclusion    String?   // ディベートの勝敗
  status        DebateStatus @default(IN_PROGRESS)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  finishedAt    DateTime?

  // リレーション
  userId        String    @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // fields は自身のモデル(Profile)の項目、references にはProfileからみた参照先のモデル(User)の項目をいれる
  messages      Message[]
  scores        Int? // ディベートのスコア

  @@map("debates")
}

model Message {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  chatMessage   Json     @db.Json
  chatSessionId String
  chatSession   Chat  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum Role {
  USER
  AI
}

enum DebateStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
