// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// デコレータはフィールドとモデルとでは@の数が違う
model User {
  id            String    @id @default(cuid()) // フィールドを主キーとする。フィールドレベルでは「@」は1つ
  name          String?
  image         String?
  password      String? // Supabaseを使う場合、実際のパスワードは保存しない
  createdAt     DateTime  @default(now()) // フィールドのデフォルト値を設定す
  updatedAt     DateTime  @updatedAt // フィールドの更新日時を自動的に設定する
  debates       Chat[]

  @@map("users") // DBテーブル名
}

model Chat {
  id            String    @id @default(cuid())
  title         String
  option        String
  type          String
  conclusion    String?
  status        DebateStatus @default(IN_PROGRESS)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  finishedAt    DateTime?

  // リレーション
  userId        String  @map("user_id")
  // fieldsは自身のmodelのフィールド、referencesにはこのmodelからみた参照先のモデル(User)のフィールド
  // onDelete: Cascadeを指定することで親が削除された際に子も削除される
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  scores        Int?

  @@map("debates")
}

model Message {
  id            String       @id @default(cuid())
  role          String
  createdAt     DateTime     @default(now())
  chatMessage   String
  chatSessionId String
  chatSession   Chat  @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum DebateStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
